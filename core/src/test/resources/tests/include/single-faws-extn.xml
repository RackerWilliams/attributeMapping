<!--
    Assertions used to test extracting extensions. In this case there
    should be a single FAWSPolicy value.
-->

<common-assertions xmlns="http://docs.rackspace.com/identity/api/ext/MappingRules">
    <assert-group name="xml">
        <assert test="every $p in in-scope-prefixes(/auth:extendedAttributes)
                      satisfies not(namespace-uri-for-prefix($p,/auth:extendedAttributes) =
                      (xs:anyURI('http://docs.rackspace.com/identity/api/ext/MappingRules'),
                       xs:anyURI('urn:oasis:names:tc:SAML:2.0:assertion'),
                       xs:anyURI('urn:oasis:names:tc:SAML:2.0:protocol'),
                       xs:anyURI('http://openrepose.org/attribExtractor')
                       ))">
            SAML and internal namespaces should not leak into the auth:extendedAttributes result.
        </assert>
        <assert test="/auth:extendedAttributes/auth:group[@name='user']/auth:attribute[@name='foo']">
            There should be a user group with foo attribute.
        </assert>
        <assert test="count(/auth:extendedAttributes/auth:group[@name='user']/auth:attribute[@name='foo']/auth:value) = 2">
            There should be two values for attribute foo
        </assert>
        <assert test="every $v in /auth:extendedAttributes/auth:group[@name='user']/auth:attribute[@name='foo']/auth:value satisfies $v=('2017-01-04T14:41:42.206-06:00',
                      '2018-01-04T14:41:42.206-06:00')">
            The values should match correctly.
        </assert>
        <assert test="/auth:extendedAttributes/auth:group[@name='user']/auth:attribute[@name='bar']">
            There should be a user group with bar attribute
        </assert>
        <assert test="count(/auth:extendedAttributes/auth:group[@name='user']/auth:attribute[@name='bar']/auth:value) = 1">
            There should be a single value for attribute bar
        </assert>
        <assert test="every $v in /auth:extendedAttributes/auth:group[@name='user']/auth:attribute[@name='bar']/auth:value satisfies $v=('bar')">
            The value should match correctly.
        </assert>
        <assert test="exists(/auth:extendedAttributes/auth:group[@name='user']/auth:attribute[@name='biz'])">
            The biz attribute should exist
        </assert>
        <assert test="empty(/auth:extendedAttributes/auth:group[@name='user']/auth:attribute[@name='biz']/auth:value)">
            The biz attribute should not have a value
        </assert>
        <assert test="count(/auth:extendedAttributes/auth:group[@name='user']/auth:attribute) = 3">
            There should only be two attributes in user
        </assert>
        <assert test="/auth:extendedAttributes/auth:group[@name='faws']/auth:attribute[@name='policy']">
            There should be a faws group with policy attribute
        </assert>
        <assert test="count(/auth:extendedAttributes/auth:group[@name='faws']/auth:attribute[@name='policy']/auth:value) = 1">
            There should be 1 value for attribute policy
        </assert>
        <assert test="every $v in /auth:extendedAttributes/auth:group[@name='faws']/auth:attribute[@name='policy']/auth:value satisfies $v=
                      ('AWSPolicy')">
            The value should match correctly
        </assert>
        <assert test="/auth:extendedAttributes/auth:group[@name='faws']/auth:attribute[@name='policy2']">
            There should be a faws group with policy2 attribute
        </assert>
        <assert test="count(/auth:extendedAttributes/auth:group[@name='faws']/auth:attribute[@name='policy2']/auth:value) = 5">
            There should be 5 values for attribute policy2
        </assert>
        <assert test="every $v in /auth:extendedAttributes/auth:group[@name='faws']/auth:attribute[@name='policy2']/auth:value satisfies $v=
                      ('AWSPolicy','AWSPolicy2','AWSPolicy YEA!','AWSPolicy3','AWSPolicy YEA!!')">
            The values should match correctly
        </assert>
        <assert
            test="exists(/auth:extendedAttributes/auth:group[@name='faws']/auth:attribute[@name='policy3'
                  and @multiValue='true'])">
            The policy3 attribute should exist and should be multivalue
        </assert>
        <assert test="empty(/auth:extendedAttributes/auth:group[@name='faws']/auth:attribute[@name='policy3']/auth:value)">
            The policy3 attribute should not have a value
        </assert>
    </assert-group>
    <assert-group name="json">
        <json-assert test='exists($_?("RAX-AUTH:extendedAttributes")?user?foo)'>
            There should be a user group with foo attribute
        </json-assert>
        <json-assert test='count($_?("RAX-AUTH:extendedAttributes")?user?foo?*) = 2'>
            There should be two values for attribute foo
        </json-assert>
        <json-assert test="every $val in $_?('RAX-AUTH:extendedAttributes')?user?foo?* satisfies $val=('2017-01-04T14:41:42.206-06:00',
                           '2018-01-04T14:41:42.206-06:00')">
            The values should match correctly.
        </json-assert>
        <json-assert test='exists($_?("RAX-AUTH:extendedAttributes")?user?bar)'>
            There should be a user group with bar attribute
        </json-assert>
        <json-assert test="$_?('RAX-AUTH:extendedAttributes')?user?bar = 'bar'">
            The value of bar should be bar
        </json-assert>
        <json-assert test="'biz' = map:keys($_?('RAX-AUTH:extendedAttributes')?user)">
            There should be a user group with a biz attribute.
        </json-assert>
        <json-assert test="empty($_?('RAX-AUTH:extendedAttributes')?user?biz)">
            The value of biz should be empty.
        </json-assert>
        <json-assert test='count(map:keys($_?("RAX-AUTH:extendedAttributes")?user)) = 3'>
            There should only be 3 attributes in user
        </json-assert>
        <json-assert test='exists($_?("RAX-AUTH:extendedAttributes")?faws?policy)'>
            There should be a user faws with policy attribute
        </json-assert>
        <json-assert test='count($_?("RAX-AUTH:extendedAttributes")?faws?policy?*) = 1'>
            There should be 1 value for attribute policy
        </json-assert>
        <json-assert test="every $val in $_?('RAX-AUTH:extendedAttributes')?faws?policy?* satisfies $val=
                           ('AWSPolicy')">
            The value should match correctly
        </json-assert>
        <json-assert test='exists($_?("RAX-AUTH:extendedAttributes")?faws?policy2)'>
            There should be a user faws with policy2 attribute
        </json-assert>
        <json-assert test='count($_?("RAX-AUTH:extendedAttributes")?faws?policy2?*) = 5'>
            There should be 5 values for attribute policy2
        </json-assert>
        <json-assert test="every $val in $_?('RAX-AUTH:extendedAttributes')?faws?policy2?* satisfies $val=
                           ('AWSPolicy','AWSPolicy2','AWSPolicy YEA!','AWSPolicy3','AWSPolicy YEA!!')">
            The values should match correctly
        </json-assert>
        <json-assert test="exists($_?('RAX-AUTH:extendedAttributes')?faws?policy3)">
            There should be a faws/policy3
        </json-assert>
        <json-assert test="count($_?('RAX-AUTH:extendedAttributes')?faws?policy3?*) = 0">
            The value of faws/policy3  should be empty.
        </json-assert>
    </assert-group>
</common-assertions>
